# Here you can define all your data sets by using simple YAML syntax.
#
# Documentation for this file format can be found in "The Data Catalog"
# Link: https://docs.kedro.org/en/stable/data/data_catalog.html
#
# We support interacting with a variety of data stores including local file systems, cloud, network and HDFS
#
# An example data set definition can look as follows:
#
#bikes:
#  type: pandas.CSVDataset
#  filepath: "data/01_raw/bikes.csv"
#
#weather:
#  type: spark.SparkDataset
#  filepath: s3a://your_bucket/data/01_raw/weather*
#  file_format: csv
#  credentials: dev_s3
#  load_args:
#    header: True
#    inferSchema: True
#  save_args:
#    sep: '|'
#    header: True
#
#scooters:
#  type: pandas.SQLTableDataset
#  credentials: scooters_credentials
#  table_name: scooters
#  load_args:
#    index_col: ['name']
#    columns: ['name', 'gear']
#  save_args:
#    if_exists: 'replace'
#    # if_exists: 'fail'
#    # if_exists: 'append'
#
# The Data Catalog supports being able to reference the same file using two different Dataset implementations
# (transcoding), templating and a way to reuse arguments that are frequently repeated. See more here:
# https://docs.kedro.org/en/stable/data/data_catalog.html

# companies:
#   type: pandas.CSVDataset
#   filepath: data/01_raw/companies.csv

# reviews:
#   type: pandas.CSVDataset
#   filepath: data/01_raw/reviews.csv

# shuttles:
#   type: pandas.ExcelDataset
#   filepath: data/01_raw/shuttles.xlsx
#   load_args:
#     engine: openpyxl

# preprocessed_companies:
#   type: pandas.ParquetDataset
#   filepath: data/02_intermediate/preprocessed_companies.pq

# preprocessed_shuttles:
#   type: pandas.ParquetDataset
#   filepath: data/02_intermediate/preprocessed_shuttles.pq

# model_input_table:
#   type: pandas.ParquetDataset
#   filepath: data/03_primary/model_input_table.pq

# regressor:
#   type: pickle.PickleDataset
#   filepath: data/06_models/regressor.pickle
#   versioned: true


bank_raw_data:
  type: pandas.CSVDataset
  filepath: data/01_raw/bank_data.csv
  load_args:
    sep: ';'


sample:
  type: pandas.CSVDataset
  filepath: data/01_raw/sample.csv


raw_describe:
  type: kedro_mlflow.io.artifacts.MlflowArtifactDataset
  dataset:
    type: json.JSONDataset
    filepath: data/08_reporting/describe_data_raw.json

cleaned_describe:
  type: kedro_mlflow.io.artifacts.MlflowArtifactDataset
  dataset:
    type: json.JSONDataset
    filepath: data/08_reporting/describe_data_cleaned.json


bank_cleaned_data:
  type: pandas.CSVDataset
  filepath: data/02_intermediate/bank_full_cleaned.csv


bank_data_engineered:
  type: pandas.CSVDataset
  filepath: data/04_feature/bank_full_engineered.csv

X_train_data:
  type: pandas.CSVDataset
  filepath: data/05_model_input/X_train.csv

y_train_data:
  type: pandas.CSVDataset
  filepath: data/05_model_input/y_train.csv


X_test_data:
  type: pandas.CSVDataset
  filepath: data/05_model_input/X_test.csv

y_test_data:
  type: pandas.CSVDataset
  filepath: data/05_model_input/y_test.csv


production_model:
  type: kedro_mlflow.io.artifacts.MlflowArtifactDataset
  dataset:
    type: pickle.PickleDataset
    filepath: data/06_models/production_model.pkl

production_model_metrics:
  type: kedro_mlflow.io.artifacts.MlflowArtifactDataset
  dataset:
    type: json.JSONDataset
    filepath: data/08_reporting/production_model_metrics.json




X_to_predict:
  type: pandas.CSVDataset
  filepath: data/03_primary/X_to_predict.csv

df_with_predict:
  type: pandas.CSVDataset
  filepath: data/07_model_output/df_with_predict.csv

predict_describe:
  type: kedro_mlflow.io.artifacts.MlflowArtifactDataset
  dataset:
    type: json.JSONDataset
    filepath: data/08_reporting/predict_describe.json